parameters:
  name: null
  pool: {}
  architecture: null
  useRemoteDockerServer: false
  matrix: {}

jobs:
- job: ${{ parameters.name }}
  pool: ${{ parameters.pool }}
  strategy: 
    matrix: ${{ parameters.matrix }}
  timeoutInMinutes: 180
  variables:
    ${{ if eq(parameters.useRemoteDockerServer, 'true') }}:
      dockerArmRunOptions:
        -v $(DOCKER_CERT_PATH):/docker-certs
        -e DOCKER_CERT_PATH=/docker-certs
        -e DOCKER_TLS_VERIFY=1
        -e DOCKER_HOST=tcp://$(DOCKER_HOST_IP):2376
    ${{ if eq(parameters.useRemoteDockerServer, 'false') }}:
      dockerArmRunOptions: ""
    ${{ if ne(variables['System.TeamProject'], 'public') }}:
      imageBuilderBuildArgs:
        --registry-override $(acr.server)
        --repo-prefix $(publishRepoPrefix)
        --push
        --username $(acr.userName)
        --password $(BotAccount-dotnet-docker-acr-bot-password)
      dockerRunOptions: -e DOCKER_REPO=$(acr.server)/$(publishRepoPrefix)dotnet-buildtools/prereqs
    ${{ if eq(variables['System.TeamProject'], 'public') }}:
      imageBuilderBuildArgs: ""
      dockerRunOptions: ""
    imageBuilderTag: image-builder
    imageBuilderArgs:
      build
      --path "$(imageBuilderPath)"
      --manifest manifest.json
      --architecture ${{ parameters.architecture }}
      $(imageBuilderBuildArgs)
  steps:
  - template: ../steps/cleanup-docker-linux.yml
    parameters:
      runOnlyBasicCleanup: ${{ parameters.useRemoteDockerServer }}
  - script: docker build -t $(imageBuilderTag) --pull -f ./Dockerfile.linux.imagebuilder .
    displayName: Build Runner Image
  - script: >
      docker run
      --rm
      -v /var/run/docker.sock:/var/run/docker.sock
      $(dockerArmRunOptions)
      $(dockerRunOptions)
      $(imageBuilderTag)
      $(imageBuilderArgs)
    displayName: Build Images
  - template: ../steps/cleanup-docker-linux.yml
    parameters:
      cleanupRemoteDockerServer: ${{ parameters.useRemoteDockerServer }}
