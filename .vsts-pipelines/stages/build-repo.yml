parameters:
  buildMatrixType: platformDependencyGraph

stages:

################################################################################
# Build Images
################################################################################
- stage: Build
  jobs:
  - template: ../jobs/generate-matrix.yml
    parameters:
      matrixType: ${{ parameters.buildMatrixType }}
      name: GenerateBuildMatrix
      customBuildLegGrouping: ${{ parameters.customBuildLegGrouping }}

  - template: ../jobs/build-images.yml
    parameters:
      name: Build_Linux_amd64
      pool: # linuxAmd64Pool
        name: Hosted Ubuntu 1604
      matrix: dependencies.GenerateBuildMatrix.outputs['${{ format('matrix.{0}MatrixLinuxAmd64', parameters.buildMatrixType) }}']
      dockerClientOS: linux
  - template: ../jobs/build-images.yml
    parameters:
      name: Build_Linux_arm64v8
      pool: # linuxArm64v8Pool
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          name: DotNetCore-Docker-Public
        ${{ if eq(variables['System.TeamProject'], 'internal') }}:
          name: DotNetCore-Docker
        demands:
        - agent.os -equals linux
        - RemoteDockerServerOS -equals linux
        - RemoteDockerServerArch -equals aarch64
      matrix: dependencies.GenerateBuildMatrix.outputs['${{ format('matrix.{0}MatrixLinuxArm64v8', parameters.buildMatrixType) }}']
      useRemoteDockerServer: true
      dockerClientOS: linux
  - template: ../jobs/build-images.yml
    parameters:
      name: Build_Linux_arm32v7
      pool: # linuxArm32v7Pool
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          name: DotNetCore-Docker-Public
        ${{ if eq(variables['System.TeamProject'], 'internal') }}:
          name: DotNetCore-Docker
        demands:
        - agent.os -equals linux
        - RemoteDockerServerOS -equals linux
        - RemoteDockerServerArch -equals aarch64
      matrix: dependencies.GenerateBuildMatrix.outputs['${{ format('matrix.{0}MatrixLinuxArm32v7', parameters.buildMatrixType) }}']
      useRemoteDockerServer: true
      dockerClientOS: linux
  - template: ../jobs/build-images.yml
    parameters:
      name: Build_NanoServer1803_amd64
      pool: # windows1803Amd64Pool
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          name: DotNetCore-Docker-Public
        ${{ if eq(variables['System.TeamProject'], 'internal') }}:
          name: DotNetCore-Docker
        demands: VSTS_OS -equals Windows_Server_2016_Data_Center_RS4
      matrix: dependencies.GenerateBuildMatrix.outputs['${{ format('matrix.{0}MatrixNanoserver1803Amd64', parameters.buildMatrixType) }}']
      dockerClientOS: windows
  - template: ../jobs/build-images.yml
    parameters:
      name: Build_NanoServer1809_amd64
      pool: # windows1809Amd64
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          name: DotNetCore-Docker-Public
        ${{ if eq(variables['System.TeamProject'], 'internal') }}:
          name: DotNetCore-Docker
        demands: VSTS_OS -equals Windows_Server_2019_Data_Center_RS5
      matrix: dependencies.GenerateBuildMatrix.outputs['${{ format('matrix.{0}MatrixNanoserver1809Amd64', parameters.buildMatrixType) }}']
      dockerClientOS: windows
