name: CODEOWNERS Validation
run-name: ${{ github.actor }} is validating CODEOWNERS
on:
  pull_request:
    branches:
      - main

jobs:
  CheckDockerfileCodeowners:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Define functions
        run: |
          #!/bin/bash
          set -e

          read_codeowners_file() {
            local codeOwnersFilePath="CODEOWNERS"
            local codeOwnerPaths=()

            while IFS= read -r line; do
              if [[ "$line" =~ ^\s*# ]] || [[ -z "$line" ]] || [[ "$line" =~ ^[[:space:]]*$ ]]; then
                continue
              fi

              path=$(echo "$line" | cut -d' ' -f1 | sed 's/^[[:space:]]*//' | sed 's/[\/&]/\\&/g' | sed 's/\./\\./g' | sed 's/\*/.*/g')
              codeOwnerPaths+=("$path")
            done < "$codeOwnersFilePath"

            echo "${codeOwnerPaths[@]}"
          }

          export -f read_codeowners_file

      - name: Ensure each CODEOWNER is a team
        run: |
          #!/bin/bash
          set -e

          codeOwnersFilePath="CODEOWNERS"
          codeOwners=$(grep -v '^#' "$codeOwnersFilePath" | cut -d' ' -f2)

          for codeOwner in $codeOwners; do
            if [[ "$codeOwner" != *"/"* ]]; then
              echo "The CODEOWNERS file must contain teams, not individual users."
              exit 1
            fi
          done

      - name: Check each Dockerfile for a CODEOWNER
        run: |
          #!/bin/bash
          set -e

          codeOwnerPaths=($(read_codeowners_file))

          filesWithoutOwner=()
          dockerfiles=$(find . -type f -name "Dockerfile")

          for dockerfile in $dockerfiles; do
            ownerFound=false
            for path in "${codeOwnerPaths[@]}"; do
              if [[ "$dockerfile" =~ $path ]]; then
                ownerFound=true
                break
              fi
            done

            if [[ "$ownerFound" == false ]]; then
              filesWithoutOwner+=("$dockerfile")
            fi
          done

          if [[ ${#filesWithoutOwner[@]} -gt 0 ]]; then
            echo "The following Dockerfiles do not have an owner in the CODEOWNERS file:"
            printf "%s\n" "${filesWithoutOwner[@]}"
            exit 1
          fi

      - name: Check for unused CODEOWNER paths
        run: |
          #!/bin/bash
          set -e

          codeOwnerPaths=($(read_codeowners_file))

          unusedPaths=()
          allFiles=$(find . -type f)

          for path in "${codeOwnerPaths[@]}"; do
            pathUsed=false
            for file in $allFiles; do
              if [[ "$file" =~ $path ]]; then
                pathUsed=true
                break
              fi
            done

            if [[ "$pathUsed" == false ]]; then
              unusedPaths+=("$path")
            fi
          done

          if [[ ${#unusedPaths[@]} -gt 0 ]]; then
            echo "The following paths in the CODEOWNERS file are not used by any file in the repository:"
            printf "%s\n" "${unusedPaths[@]}"
            exit 1
          fi